import logging
from telegram import Update
from telegram.ext import ContextTypes
from config import DEFAULT_COINS, DEFAULT_INTERVAL, ALLOWED_INTERVALS

logger = logging.getLogger(__name__)

# In-memory storage for user settings
user_settings = {}

def get_user_settings(chat_id):
    """Get or create user settings."""
    if chat_id not in user_settings:
        user_settings[chat_id] = {
            "coins": DEFAULT_COINS.copy(),
            "interval": DEFAULT_INTERVAL,
            "last_signals": {}
        }
    return user_settings[chat_id]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /start command."""
    chat_id = update.effective_chat.id
    settings = get_user_settings(chat_id)
    
    welcome_message = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø SignalMaxBot.\n\n"
        "–Ø –ø–æ–º–æ–≥–∞—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç "
        "–∏—Å–ø–æ–ª—å–∑—É—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ (EMA, RSI, MACD).\n\n"
        "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/add SYMBOL - –¥–æ–±–∞–≤–∏—Ç—å –º–æ–Ω–µ—Ç—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\n"
        "/remove SYMBOL - —É–¥–∞–ª–∏—Ç—å –º–æ–Ω–µ—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞\n"
        "/coins - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –º–æ–Ω–µ—Ç\n"
        "/timeframe INTERVAL - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º—Ñ—Ä–µ–π–º (1m, 5m, 15m)\n"
        "/start - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        f"‚öôÔ∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
        f"–¢–∞–π–º—Ñ—Ä–µ–π–º: {settings['interval']}\n"
        f"–ú–æ–Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ: {len(settings['coins'])}"
    )
    
    await update.message.reply_text(welcome_message)
    logger.info(f"User {chat_id} started the bot")

async def show_coins(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /coins command - show user's coin list."""
    chat_id = update.effective_chat.id
    settings = get_user_settings(chat_id)
    coins = settings["coins"]
    
    if not coins:
        message = "üìù –¢—ã –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—à—å –Ω–∏ –æ–¥–Ω–æ–π –º–æ–Ω–µ—Ç—ã.\n\n–ò—Å–ø–æ–ª—å–∑—É–π /add SYMBOL —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –º–æ–Ω–µ—Ç—É."
    else:
        message = f"üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –º–æ–Ω–µ—Ç—ã ({len(coins)}):\n\n"
        for i, coin in enumerate(coins, 1):
            message += f"{i}. {coin}\n"
        message += f"\n‚è± –¢–∞–π–º—Ñ—Ä–µ–π–º: {settings['interval']}"
    
    await update.message.reply_text(message)
    logger.info(f"User {chat_id} requested coin list")

async def add_coin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /add command - add coin to watchlist."""
    chat_id = update.effective_chat.id
    
    if len(context.args) != 1:
        await update.message.reply_text(
            "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã.\n\n"
            "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: /add SYMBOL\n"
            "–ü—Ä–∏–º–µ—Ä: /add BTC-USDT"
        )
        return
    
    symbol = context.args[0].upper()
    settings = get_user_settings(chat_id)
    
    if symbol in settings["coins"]:
        await update.message.reply_text(f"‚ö†Ô∏è –ú–æ–Ω–µ—Ç–∞ {symbol} —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.")
    else:
        settings["coins"].append(symbol)
        await update.message.reply_text(
            f"‚úÖ –ú–æ–Ω–µ—Ç–∞ {symbol} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.\n\n"
            f"–í—Å–µ–≥–æ –º–æ–Ω–µ—Ç: {len(settings['coins'])}"
        )
        logger.info(f"User {chat_id} added coin {symbol}")

async def remove_coin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /remove command - remove coin from watchlist."""
    chat_id = update.effective_chat.id
    
    if len(context.args) != 1:
        await update.message.reply_text(
            "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã.\n\n"
            "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: /remove SYMBOL\n"
            "–ü—Ä–∏–º–µ—Ä: /remove BTC-USDT"
        )
        return
    
    symbol = context.args[0].upper()
    settings = get_user_settings(chat_id)
    
    if symbol not in settings["coins"]:
        await update.message.reply_text(f"‚ö†Ô∏è –ú–æ–Ω–µ—Ç—ã {symbol} –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.")
    else:
        settings["coins"].remove(symbol)
        # Clear last signal for removed coin
        settings["last_signals"].pop(symbol, None)
        await update.message.reply_text(
            f"‚úÖ –ú–æ–Ω–µ—Ç–∞ {symbol} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.\n\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å –º–æ–Ω–µ—Ç: {len(settings['coins'])}"
        )
        logger.info(f"User {chat_id} removed coin {symbol}")

async def set_interval(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /timeframe command - set timeframe."""
    chat_id = update.effective_chat.id
    
    if len(context.args) != 1:
        await update.message.reply_text(
            "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã.\n\n"
            "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: /timeframe INTERVAL\n"
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã: {', '.join(ALLOWED_INTERVALS)}\n"
            "–ü—Ä–∏–º–µ—Ä: /timeframe 15m"
        )
        return
    
    interval = context.args[0].lower()
    
    if interval not in ALLOWED_INTERVALS:
        await update.message.reply_text(
            f"‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º: {interval}\n\n"
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã: {', '.join(ALLOWED_INTERVALS)}"
        )
        return
    
    settings = get_user_settings(chat_id)
    old_interval = settings["interval"]
    settings["interval"] = interval
    
    # Clear last signals when changing timeframe
    settings["last_signals"].clear()
    
    await update.message.reply_text(
        f"‚úÖ –¢–∞–π–º—Ñ—Ä–µ–π–º –∏–∑–º–µ–Ω—ë–Ω —Å {old_interval} –Ω–∞ {interval}\n\n"
        "–ò—Å—Ç–æ—Ä–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—á–∏—â–µ–Ω–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –Ω–æ–≤—ã–º —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–º."
    )
    logger.info(f"User {chat_id} changed interval from {old_interval} to {interval}")

async def send_signal(app, chat_id, symbol, interval, signal):
    """Send trading signal to user."""
    try:
        from bot.signals import format_signal_message
        message = format_signal_message(symbol, interval, signal)
        await app.bot.send_message(chat_id=chat_id, text=message)
        logger.info(f"Sent {signal} signal for {symbol} to user {chat_id}")
    except Exception as e:
        logger.error(f"Failed to send signal to user {chat_id}: {e}")
