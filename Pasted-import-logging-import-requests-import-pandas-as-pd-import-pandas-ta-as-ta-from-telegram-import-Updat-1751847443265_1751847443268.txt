import logging
import requests
import pandas as pd
import pandas_ta as ta
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
import asyncio
import os

TOKEN = os.getenv("BOT_TOKEN")

user_settings = {}

logging.basicConfig(level=logging.INFO)

def get_ohlcv(symbol, interval="15m", limit=100):
    url = f"https://www.okx.com/api/v5/market/history-candles?instId={symbol}&bar={interval}&limit={limit}"
    resp = requests.get(url)
    data = resp.json()
    if data.get("code") != "0":
        logging.error(f"OKX API error: {data.get('msg')}")
        return None
    df = pd.DataFrame(data["data"], columns=["timestamp","open","high","low","close","volume","turnover"])
    df["close"] = df["close"].astype(float)
    df["volume"] = df["volume"].astype(float)
    return df

def check_signal(df):
    if df is None or len(df) < 30:
        return None
    df["EMA8"] = ta.ema(df["close"], length=8)
    df["EMA21"] = ta.ema(df["close"], length=21)
    df["RSI"] = ta.rsi(df["close"], length=14)
    macd = ta.macd(df["close"])
    df = pd.concat([df, macd], axis=1)
    last = df.iloc[-1]
    prev = df.iloc[-2]

    cross_up = (prev["EMA8"] < prev["EMA21"]) and (last["EMA8"] > last["EMA21"])
    cross_down = (prev["EMA8"] > prev["EMA21"]) and (last["EMA8"] < last["EMA21"])
    rsi = last["RSI"]
    macd_val = last["MACD_12_26_9"]

    if cross_up and rsi > 50 and macd_val > 0:
        return "LONG"
    elif cross_down and rsi < 50 and macd_val < 0:
        return "SHORT"
    return None

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id not in user_settings:
        user_settings[chat_id] = {
            "coins": ["BTC-USDT", "ETH-USDT", "SOL-USDT", "HBAR-USDT", "DOGE-USDT", "H-USDT", "SOON-USDT"],
            "interval": "15m",
            "last_signals": {}
        }
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø SignalMaxBot.\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/–¥–æ–±–∞–≤—å SYMBOL - –¥–æ–±–∞–≤–∏—Ç—å –º–æ–Ω–µ—Ç—É\n"
        "/—É–¥–∞–ª–∏ SYMBOL - —É–¥–∞–ª–∏—Ç—å –º–æ–Ω–µ—Ç—É\n"
        "/–º–æ–Ω–µ—Ç—ã - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç\n"
        "/—Ç–∞–π–º—Ñ—Ä–µ–π–º INTERVAL - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º—Ñ—Ä–µ–π–º (1m,5m,15m)\n"
    )

async def show_coins(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    coins = user_settings.get(chat_id, {}).get("coins", [])
    if not coins:
        text = "–¢—ã –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—à—å –Ω–∏ –æ–¥–Ω–æ–π –º–æ–Ω–µ—Ç—ã."
    else:
        text = "–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –º–æ–Ω–µ—Ç—ã:\n" + "\n".join(coins)
    await update.message.reply_text(text)

async def add_coin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if len(context.args) != 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /–¥–æ–±–∞–≤—å SYMBOL (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTC-USDT)")
        return
    symbol = context.args[0].upper()
    settings = user_settings.setdefault(chat_id, {
        "coins": [],
        "interval": "15m",
        "last_signals": {}
    })
    if symbol in settings["coins"]:
        await update.message.reply_text(f"–ú–æ–Ω–µ—Ç–∞ {symbol} —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ.")
    else:
        settings["coins"].append(symbol)
        await update.message.reply_text(f"–ú–æ–Ω–µ—Ç–∞ {symbol} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.")

async def remove_coin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if len(context.args) != 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /—É–¥–∞–ª–∏ SYMBOL (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTC-USDT)")
        return
    symbol = context.args[0].upper()
    settings = user_settings.get(chat_id, {})
    if symbol not in settings.get("coins", []):
        await update.message.reply_text(f"–ú–æ–Ω–µ—Ç—ã {symbol} –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ.")
    else:
        settings["coins"].remove(symbol)
        await update.message.reply_text(f"–ú–æ–Ω–µ—Ç–∞ {symbol} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.")

async def set_interval(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if len(context.args) != 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /—Ç–∞–π–º—Ñ—Ä–µ–π–º INTERVAL (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1m,5m,15m)")
        return
    interval = context.args[0]
    allowed = ["1m", "5m", "15m"]
    if interval not in allowed:
        await update.message.reply_text("–î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã: 1m, 5m, 15m")
        return
    settings = user_settings.setdefault(chat_id, {
        "coins": ["BTC-USDT", "ETH-USDT"],
        "interval": "15m",
        "last_signals": {}
    })
    settings["interval"] = interval
    await update.message.reply_text(f"–¢–∞–π–º—Ñ—Ä–µ–π–º –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {interval}")

async def send_signal(app, chat_id, symbol, interval, signal):
    message = f"üìà –°–∏–≥–Ω–∞–ª –Ω–∞ {signal}\n–ú–æ–Ω–µ—Ç–∞: {symbol}\n–¢–∞–π–º—Ñ—Ä–µ–π–º: {interval}\n\n"
    if signal == "LONG":
        message += "‚úÖ EMA8 –ø–µ—Ä–µ—Å—ë–∫ EMA21 –≤–≤–µ—Ä—Ö\n‚úÖ RSI > 50\n‚úÖ MACD –≤ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π –∑–æ–Ω–µ"
    else:
        message += "‚úÖ EMA8 –ø–µ—Ä–µ—Å—ë–∫ EMA21 –≤–Ω–∏–∑\n‚úÖ RSI < 50\n‚úÖ MACD –≤ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π –∑–æ–Ω–µ"
    await app.bot.send_message(chat_id=chat_id, text=message)

async def monitor(app):
    while True:
        for chat_id, settings in user_settings.items():
            coins = settings.get("coins", [])
            interval = settings.get("interval", "15m")
            for symbol in coins:
                df = get_ohlcv(symbol, interval)
                if df is None:
                    continue
                signal = check_signal(df)
                last_signal = settings["last_signals"].get(symbol)
                if signal and signal != last_signal:
                    await send_signal(app, chat_id, symbol, interval, signal)
                    settings["last_signals"][symbol] = signal
        await asyncio.sleep(60)

if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("–º–æ–Ω–µ—Ç—ã", show_coins))
    app.add_handler(CommandHandler("–¥–æ–±–∞–≤—å", add_coin))
    app.add_handler(CommandHandler("—É–¥–∞–ª–∏", remove_coin))
    app.add_handler(CommandHandler("—Ç–∞–π–º—Ñ—Ä–µ–π–º", set_interval))

    async def main():
        await asyncio.gather(
            app.run_polling(),
            monitor(app)
        )

    import asyncio
    asyncio.run(main())